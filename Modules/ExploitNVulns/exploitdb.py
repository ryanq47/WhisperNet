import csv
from PySide6.QtCore import Signal, QObject

class LogecExploitdb(QObject):
    results = Signal(list)

    def __init__(self, parent=None, csv_filepath=""):
        super().__init__(parent)
        self.csv_filepath = csv_filepath

        # loading CSV on class init
        self.load_csv()

    def load_csv(self):
        with open(self.csv_filepath, 'r') as file:
            # Create a CSV reader
            self.reader = csv.reader(file)



    def search(self, search_term=""):
        exploit_list = []
        #print(f"searching: {search_term}")

        if search_term == "":
            search_term="placeholder_so_you_don't_crash_system"

        with open(self.csv_filepath, 'r') as file:
            # Create a CSV reader
            reader = csv.reader(file)

            ## ugly, but does the nested/partial string match search
            for row in reader:
                #print(row)
                # Search for specific data
                for item in row:
                    # .lower() for case insensitive searching
                    if search_term.lower() in item.lower() :
                        exploit_list.append(row)
                        #print(row)
        self.results.emit(exploit_list)
        #print("done")

'''
A handler for searching vulns

1) Read data from DB (file location, directory of contents, etc) table name: EXPLOITNVULN-data
    has keys for category, n other stuff

2) read CSV file

3) Parse CSV file

4) return results, maybe have results show as a QT table widget

'''

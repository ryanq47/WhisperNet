#Standards (Feed Me from line 3 down to chatgpt to refactor)
## ask this: Please refactor to abide by the cool-standards guidelines:
Here's my coding standard called cool-standard. Please say "cool-standard received, 
please paste your code" when you understand cool-standard. 
The next message will be code for you to refactor via cool standard. 
You must not deviate from cool-standard, and if you have any questions, 
ask them before printing the refactored code.

Last but not least, please point out any potentaily optimziations, as well
as a summary of what you changed when done refactoring


Error Codes:

    Class:
        Each class/function with have it's potential errors defined in the __init__ constructor. 
        These will be named via the guidelines outlined in the "Error Naming" section.

        (still figuring out how to do this on/with the main logec file - maybe just emit the errors back to 
        the error function)
        Above the grouping of errors, there will be a comment header:
            #Errors:

        Example:
        def __init__(self):
            self.err_ConnRefused_0x01


    Error Naming:
        Each error will be named via 3 parts:
            1) A subcode (0x01, 0x02) for more specific cases
            2) The module short abbreviation before the x01 (due to python variable naming rules)
                :: server would be Sx01
                :: Bruteforce would be BFx01
            3) All error codes will be consistent accross the suite, but
                the starting abbreviationwill change. So, some errors may not apply to some modules
                (like an SSH timeout error in Briteforce would not apply to a DNS module)
                I'm looking to avoid confusion/collusion of error codes. See list below

            
            0x00: Connection Errors
                0x01: "conn_broken_pipe: A pipe was broken"  
                0x02: "Socket Close: The socket was successfully closed"

            0x10: Input/encode/decode Errors
                0x10: "client_unkown_input: An unkown input was receieved from the client"
            0x20: User Errors


            Handling unkowns:
                SxXX: -1 means unkown, use thiscode as a catchall
                        logging.warn(f"{self.Sx-1}:{e}")


            any additional info will be added on via a []:
                ex: [client:127.0.0.1] client_unkown_input: An Unkonw input... 

        
        An example error is:
            err_0x01: client_unknown_input: An unknown inputwas recieved

Naming Schemes:
    Variables: 
        Variables will be named via snake case:
        Examples:
            my_variable
            bruteforce_module
    
    Constants:
        Constants will be named with all caps:
        Examples:
            UPPERASE_CONSTANT

    Class:
        Classes will be named via CamelCase:
        Examples:
            MyClass
            SuperClass


Comments:
    Class/Standalone Functions:
        Each class/Function will have a basic description of what it does (within reason)
            ####################
            ## Networking
            ####################
            """
            ##== NAME

            Description:
                Displays a critical error message box with the specified error message, severity, and fix.
                It also writes the error to a database and emits an error signal.

            Args:
                error_list (list): A list containing the error, severity, and fix.

            Returns:
                None
            
            Modules: 
                bruteforce.py
            """
        If there are multiple fucntions with few lines, (such as some gui functions) Group them together with
        one comment block

    Methods:
        Each method will have a description in it, with the expected input and output values:
            ##== Description

    Top Of File:
        Each file will have a mutliline comment section for a short description of what the file does

Functions:
    Return Values:
        All Functions and methods will have their return values stated for readability. 
            Example:
                def func() -> str:

Types:
    If possible, variables should be named with their type at the end, such as "list"
    Example:
        my_variable_list
        my_other_variable_bool

Signals:
    All Signals will end in "signal". This is to specify that this is a signal.
    They will be placed in the __init__ constructor, and the group will have #Signals:
    above that group

Spacing:
    There shall be no more than 2 blank lines at any time. All ifs/elifs/else's will have one line between them. 
    One line between functions is required as well. 
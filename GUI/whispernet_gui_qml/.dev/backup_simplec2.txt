    ## NOTE! Due to the "label" row, everythign might need to be +1 when indexing/accessing data and context menus. 

    ## LOG THESE THINGS

    # ALSO, move to self.data.simplec2.db_data instead of passing data in.

    # PUBLIC - call me
    def update_client_widget(self):
        '''
        Parses & Updates the client data based on the updated structure.
        '''
        self.logger.debug(f"{self.__class__.__name__}.{inspect.currentframe().f_code.co_name}: Updating Client Widget")


        ## Pulls directly from the singleton instead of the singal returning here. Allows for this to be called from wherever. 
        data_dict = self.data.simplec2.db_data
        data_dict = data_dict["data"]["nodes"]

        # First, update or add networks and clients
        for key, item in data_dict.items():
            print(item)
            ## Check to make sure the item is a network item otherwise the cidr key doesn't exist. 
            if "Network" in item["labels"]:
                self._add_or_update_network(item)
                
        # Then, remove networks that are no longer present
        self._remove_stale_networks(data_dict)

    def _add_or_update_network(self, network_data):
        '''
        Adds a new network item or updates an existing one. "private" as its a helper to update_client_widget to work. Will createa  public add network eventually.
        
        ##Also manages client items as children of the network, including a label row for clients. NAAAAh that's changing slightly
        '''
        self.logger.debug(f"{self.__class__.__name__}.{inspect.currentframe().f_code.co_name}: Attempting to add/update network")

        network_name = network_data["properties"]["nickname"]
        network_cidr = network_data["properties"]["cidr"]
        # using network name alone is fine as nickname is constrained to be unique in the db
        network_id = f"{network_name}"

        self.logger.debug(f"{self.__class__.__name__}.{inspect.currentframe().f_code.co_name}: Network Name: '{network_name}' Network CIDR: '{network_cidr}' Network Id: '{network_id}'")

        # Find if this network already exists, just searches for it
        network_item = None
        for row in range(self.client_tree_model.rowCount()):
            item = self.client_tree_model.item(row)
            if item and item.text() == network_id:
                network_item = item
                break

        if network_item is None:
            self.logger.debug(f"{self.__class__.__name__}.{inspect.currentframe().f_code.co_name}: Network '{network_name}' does not exist, creating")

            # Network does not exist, so create it
            ## okay, gotta make each data point into a QStandardItem, THEN turn them both into a list & append to the model

            network_item = QStandardItem(network_id)  # This is the main item for the network
            cidr_item = QStandardItem(network_cidr)  # Additional detail for the network

            # Append the network and CIDR as part of the same row
            self.client_tree_model.appendRow([network_item, cidr_item])

            # Add a label row directly under the new network
            self._add_label_row(network_item)

        # Example client data to add, replace with actual client handling logic
            
        ## needs to change/get all cliens with the current net name, and loop/add them as children
            '''
            for child in child_data.whatevermehtod():
                name = baby
                row.appendChild(name) #or something
            
            '''

        self.logger.debug(f"{self.__class__.__name__}.{inspect.currentframe().f_code.co_name}: Adding client data to network")
        #client_data = {"name": "testclient"}


        #for client in network_children:
            #self.add_client_to_network(network_item, client_data)
        
        ## Need to break up clients into per network whatever, casue they are all goign into one net. 
        ## FUCKKK this means relationship lookups. gonna get a bit complicated.
        # move to singleton first & clean up, then do this
        list_of_clients = self.get_clients_from_network_data()
        for client in list_of_clients:
            '''
            ## get the ID of each item
            net_identity = network["node of net"]["identity"]
            client_id = client["node of client"]["identity"]

            ## loop through each relationship
            for rel in relationship:
                # if the from client ID matches from, and the net id matches the net, and the type is connected to, allow it to be added
                if rel["from"] == client_id and rel["to"] == net_identity and type == "CONNECTED_TO":
                    self._add_client_to_network(network_item,client)

            '''
            self._add_client_to_network(network_item,client)

    def _add_label_row(self, network_item):
        '''
        Adds a label row under the specified network item, used ONLY for the first row under a network. private, helper to _add_or_update_network
        '''
        self.logger.debug(f"{self.__class__.__name__}.{inspect.currentframe().f_code.co_name}: Adding label row to first row in parent '{network_item.text()}'")

        # Define the labels for the columns under this network
        labels = ["IP", "Name", "Last Check-in"]
        label_items = [QStandardItem(label) for label in labels]

        # Set background color for each label item
        color = QBrush(self.host_label_row_color)  # Light gray color; adjust as needed
        for item in label_items:
            item.setBackground(color)

        # Append an empty item at the start if your network label row needs to be indented
        network_item.appendRow(label_items)

    def _add_client_to_network(self, network_item, client_data):
        '''
        private, helper method to _add_or_update_network
        Adds a client as a child to the specified network item.
        network_item: The network item/object to be added to.
        client_data: json data of the client. Retrieve with get_clients_from_network_data()
        '''
        # Assuming client_data is a dictionary with at least a 'name' key
        # You might want to expand this with real client data handling
        #client_items = [QStandardItem(client_data.get("IP", "")), 
        #                QStandardItem(client_data.get("name", "")), 
        #                QStandardItem(client_data.get("Last Check-in", ""))]

        client_items = [QStandardItem(client_data["properties"]["nickname"]), 
                        QStandardItem(client_data["properties"]["ip"]), 
                        QStandardItem("ahh")]


        network_item.appendRow(client_items)

    def get_clients_from_network_data(self) -> list:
        '''
        Gets a list of clients. 
        Filters out clients from the network_data, returns a list of dicts.
        
        [
            {stuff}
        ]

        '''
        self.logger.debug(f"{self.__class__.__name__}.{inspect.currentframe().f_code.co_name}: Retrieving clients from network data")

        client_list = []
        network_data = self.data.simplec2.db_data
        ## Scope it down a bit
        network_data = network_data["data"]["nodes"]

        # Need to iterate over ITEMS cause a dict is not a list duuuh
        for key, item in network_data.items():
            if "Client" in item["labels"]:
                #print(f"Client: {item['properties']['nickname']} - IP: {item['properties']['ip']}")
                #self.add_client_to_network()
                ## Append item to client list
                client_list.append(item)
        
        return client_list

    def _remove_stale_networks(self, data_dict):
        '''
        private. helper to add_or_update_network
        Removes networks that are no longer present in the incoming data_dict.
        '''
        self.logger.debug(f"{self.__class__.__name__}.{inspect.currentframe().f_code.co_name}: Checking for any stale networks")
        print(data_dict)

        current_network_names = {item['properties']['nickname'] for item in data_dict.values() if "Network" in item["labels"]}
        items_to_remove = []

        for row in range(self.client_tree_model.rowCount()):
            item = self.client_tree_model.item(row)
            if item.text() not in current_network_names:
                #print("item.text")
                #print(item.text()) # Network2 
                #print("current_network_names")
                #print(current_network_names) # {'Network2', 'Network1'}
                items_to_remove.append(row)
                self.logger.debug(f"{self.__class__.__name__}.{inspect.currentframe().f_code.co_name}: Queuing '{item.text()}' in row '{row}' to be removed")


        # Reverse removal to avoid index shifting issues
        for row in reversed(items_to_remove):
            self.logger.debug(f"{self.__class__.__name__}.{inspect.currentframe().f_code.co_name}: Removing stale network rows")
            self.client_tree_model.removeRow(row)

    def validate_client_network_relationship(self):
        '''
            Validates if a client/network has a relationship
        '''


    ########################################
    # General/Other public methods
    ########################################

    def directly_add_client_to_network(self, network_name, client_data):
        '''
            For if you want to directly add a client to a network. Untested
        '''
        # Assuming network_name is the unique identifier for the network
        network_id = f"{network_name} [{client_data['cidr']}]"
            
        found_network_item = None
        for row in range(self.client_tree_model.rowCount()):
            item = self.client_tree_model.item(row)
            if item.text() == network_id:
                found_network_item = item
                break
            
        if found_network_item:
            self._add_client_to_network(found_network_item, client_data)
        else:
            print("Network not found, cannot add client.")